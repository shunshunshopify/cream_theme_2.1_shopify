{% if section.settings.enable_section and request.page_type == 'product' and product.available %}

    {% liquid 

        assign current_variant = product.selected_or_first_available_variant

        assign product_form_id = 'product-form-' | append: section.id

        assign image = current_variant.image | default: product.featured_image 

        assign img_size = section.settings.img_width | append: 'x' | append: section.settings.img_height

    %}




{%- style -%}

        #eg-sticky-atc {

            position: fixed;

            bottom: 0;

            left: 0;

            width: 100%;

            z-index: 2;

            padding-top: {{ section.settings.pt }}rem;

            padding-bottom: {{ section.settings.pb }}rem;

            visibility: hidden;

            opacity: 0;

            transform: translateY(100%);

            transition: all .15s ease-out;

            border-top: 0.1rem solid rgba(var(--color-foreground),.08);

        }

        #eg-sticky-atc.show {

            visibility: visible;

            opacity: 1;

            transform: translateY(0);

        }

        #eg-sticky-atc .page-width-inner {

        }

    #eg-sticky-atc .price__badge-sold-out{
            display: none !important;
        }


        @media (min-width: 990px) {

            #eg-sticky-atc .page-width-inner {

                display: flex;

                align-items: center;

                justify-content: space-between;

            }

        }

        #eg-sticky-atc .product-content {

            display: flex;

            align-items: center;

            padding-bottom: .5rem;

        }

        @media (min-width: 990px) {

            #eg-sticky-atc .product-content {

                padding-bottom: 0;

                padding-right: 2rem;

            }

        }

        #eg-sticky-atc .product-content .product__title {

            margin: 0 0 .5rem;

        }

        #eg-sticky-atc .product-content .price {

            display: flex;

            align-items: center;

        }

        #eg-sticky-atc .product-content img {

            margin-right: .75rem;

        }

        #eg-sticky-atc .product-form {

/*             flex-shrink: 0; */
flex: 1;
        }

        #eg-sticky-atc .product-form .select {

            flex-shrink: 0;

            width: auto;

/*             margin-right: .75rem; */

            flex-grow: 1;

            max-width: 100%;

        }

        @media (min-width: 990px) {

            #eg-sticky-atc .product-form .select {

                flex-grow: 0;

            }

        }

        #eg-sticky-atc .product-form .select__select {

            padding-right: 4rem;
            text-align: center;

        }

        #eg-sticky-atc .product-form .quantity-input-wrapper {

/*             display: flex; */

            align-items: center;

            display: grid;

            grid-template-columns: repeat(auto-fit,188px);
          
            width: 100%;
          
            justify-content: end;

            gap: 5px;

        }

          @media screen and (max-width: 768px) {
            #eg-sticky-atc .product-form .quantity-input-wrapper {
/*                grid-template-columns: repeat(auto-fit,100%); */
              grid-template-columns: repeat(2,1fr);
            }
          }

        #eg-sticky-atc .product-form .quantity {

/*             display: none; */

            flex-shrink: 0;

            margin-right: .75rem;

            width:100%;

        }

        @media (min-width: 990px) {

            #eg-sticky-atc .product-form .quantity {

                display: flex;

            }

        }

        #eg-sticky-atc .product-form button[name="add"] {

            flex-shrink: 0;

            flex-grow: 1;

            margin: 0;

        }

        @media (min-width: 990px) {

            #eg-sticky-atc .product-form button[name="add"] {

                flex-grow: 0;

            }

        }




.quantity-input-wrapper .itex:nth-child(3n+1):last-child,
.quantity-input-wrapper .itex:nth-child(3n+2):last-child {
  grid-column-end: span 2 !important;
}

@media screen and (min-width: 768px) {
  .quantity-input-wrapper .itex:nth-child(3n+1):last-child,
  .quantity-input-wrapper .itex:nth-child(3n+2):last-child {
    grid-column-end: auto !important;
  }
  .product-form .quantity-input-wrapper button.itex:last-child {
    grid-column-end: auto !important;
  } 

  button.itex{
    grid-column-end: auto !important;
  }
}
{%- endstyle -%}




    <script>
          window.addEventListener('scroll', () => {
          const stickyATC = document.querySelector('#eg-sticky-atc');
          const img = stickyATC.querySelector('.product-content img');
          const btn = stickyATC.querySelector('[name="add"]');
          const btnSpinner = btn.querySelector('.loading-overlay__spinner');
          const selectField = stickyATC.querySelector('select[name="id"]');
          const threshold =
            document.querySelector('button[name="add"]').getBoundingClientRect().bottom + Number(stickyATC.dataset.offset);
    
          if (window.scrollY > threshold) {
            stickyATC.classList.add('show');
    
            document.documentElement.style.paddingBottom = `${stickyATC.clientHeight}px`;
    
            document.documentElement.style.height = 'auto';
          } else {
            stickyATC.classList.remove('show');
    
            document.documentElement.style.paddingBottom = '0';
          }
        });

        window.addEventListener('DOMContentLoaded', (event) => {

            const stickyATC = document.querySelector('#eg-sticky-atc')

            const img = stickyATC.querySelector('.product-content img')

            const btn = stickyATC.querySelector('[name="add"]')

            const btnSpinner = btn.querySelector('.loading-overlay__spinner')

            const selectField = stickyATC.querySelector('select[name="id"]')

            const threshold = document.querySelector('button[name="add"]').getBoundingClientRect().bottom + Number(stickyATC.dataset.offset)

            if (selectField) {

                selectField.addEventListener('change', () => {

                    img.setAttribute('src', selectField.options[selectField.selectedIndex].dataset.img)

                })

            }



            document.querySelector('.product-form [name="id"]')?.addEventListener('change', (e) => {

                const value = Number(e.target.value)
  

                if (value) {

                    selectField.value = value

                }

            })

            

        })

    </script>



    <div id="eg-sticky-atc" class="color-{{ section.settings.color_scheme }}" aria-hidden="true" data-offset="{{ section.settings.offset }}">

        <div class="page-width">

            <div class="page-width-inner">

                <div class="product-content">

                    {% if section.settings.show_img %}

                        <img

                            src="{{ image | img_url: img_size, crop: 'center' }}"

                            class=""

                            style="max-height: 80px; height: 100%; width: auto;"

                            loading="lazy">

                    {% endif %}

                    <div class="">

                        <h3 class="product__title" style="font-size: 15px;">

                            {{ product.title }}

                        </h3>

                        <div class="no-js-hidden" id="price-{{ section.id }}" role="status" {{ block.shopify_attributes }} style="display:flex;">

                            {%- render 'price', product: product, use_variant: true, show_badges: true, price_class: '' -%}

                           

                        </div>

                    </div>

                </div>

                <product-form class="product-form">

                    <div class="product-form__error-message-wrapper" role="alert" hidden>

                        <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-error" viewBox="0 0 13 13">

                            <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>

                            <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>

                            <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>

                            <path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">

                        </svg>

                        <span class="product-form__error-message"></span>

                    </div>


                    {%- form 'product', product, id: product_form_id, class: 'form', novalidate: 'novalidate' -%}

                        <div class="quantity-input-wrapper">

{% comment %}
{% if product.options.size > 0 -%}
  {% for option in product.options_with_values -%}
      {{ option.name }}
      {% for opt in option.values -%}
       - {{ opt }}
      {%- endfor %}
  {%- endfor %}
{%- endif %}


{% for vari in product.variants -%}
  {{ vari.options[0] | json }}
  {{ vari.id }}
{% endfor %}
                      

      <form method="post" action="/cart/add">
            {% if product.variants.size > 1 %}
                {% for option in product.options %}
            	<label for="SingleOptionSelector-{{forloop.index0}}"> {{ option }} </label>
            	<select id="SingleOptionSelector-{{forloop.index0}}" class="single-option-selector single-option-selector-product-template product-form__input" data-index="option{{forloop.index}}" name="id">
    				{% capture option_index %}option{{ forloop.index }}{% endcapture %} 
    				{% assign option_values = product.variants | map: option_index | uniq %}
                    {% for choice in option_values %}
                 		<option value="{{ choice }}"> {{ choice }} </option>
                  	{% endfor %}
            	</select>
            
            	{% endfor %}
            	<select id="ProductSelect-product-template" class="product-form__variants no-js" name="id" data-productid="{{product.id}}">
                  	{% for option in product.variants %}
                 		 <option value="{{option.id}}"> {{option.title}}</option>
                  	{% endfor %}
            	</select>
            {% endif %}
            
            <input min="1" type="number" id="quantity" name="quantity" value="1"/>
  			<input type="submit" value="Add to cart" class="btn" />
		</form>

{% endcomment %}

<div class="sticky-selector-next" style="display: none;">
{% for vari in product.variants -%}
  <span class="sticky-selection" select-category="{{ vari.options[0] }}" select-option="{{ vari.options[1]  }}" select-id="{{ vari.id }}"></span>
{% endfor %}
</div>


  <script>
    document.addEventListener("DOMContentLoaded", function() {
  
      const selectorList = document.querySelectorAll('.sticky-selector');
  
      selectorList.forEach(selector => {
        selector.addEventListener('change', function() {
          const sourceSelect = this.name;
          // console.log(sourceSelect)
          const selectedValue = selector.value;                      
          // console.log(`Selected value: ${selectedValue}`);
          
          const variantRadios = document.querySelectorAll("variant-radios fieldset");
          variantRadios.forEach(tVariants => {
                 const variantCategory =  tVariants.querySelector("legend").textContent;
                 // console.log(variantCategory);
                // console.log(variantCategory," -- ", sourceSelect)
                 if(variantCategory == sourceSelect){
                      // console.log(tVariants, "in") 
                      const options = tVariants.querySelectorAll("input");
                      options.forEach(option => {
                            // console.log(option.value)
                            if(option.value == selectedValue){
                                option.checked = true;

                      
                                // Get the select element whose "this" context you want to use
                                const vRadio = document.querySelector("variant-radios");
                                
                                // Create a "change" event object
                                const changeEvent = new Event('change', {
                                  bubbles: true,
                                  cancelable: true,
                                });
                                
                                // Dispatch the "change" event with the "this" context of the select element
                                vRadio.dispatchEvent(changeEvent);
                                console.log("dispatched")

                      
                            }
                      });
                 }
          });
          
        });
      });
    });
  </script>

  <script>
  document.addEventListener("DOMContentLoaded", function() {
    
          const variantRadios = document.querySelectorAll("variant-radios fieldset");
          variantRadios.forEach(tVariants => {
                 const variantCategory =  tVariants.querySelector("legend").textContent;
                 // console.log(variantCategory);
                // console.log(variantCategory," -- ", sourceSelect)

                const options = tVariants.querySelectorAll("input");
                options.forEach(option => {
                    if(option.checked){
                      const stickySelect = document.querySelector(`#eg-sticky-atc .sticky-selector[name='${option.name}']`);

                      // Loop through the options to find the option with the desired value
                      for (var i = 0; i < stickySelect.options.length; i++) {
                        if (stickySelect.options[i].value === option.value) {
                          // Set the selected attribute of the desired option to true
                          stickySelect.options[i].selected = true;
                          // console.log(stickySelect.options[i].value, " --  ", option.value)
                          // console.log(stickySelect.options[i])
                          break;
                        }
                      }

                    }
                });
          
          });  
  });
  </script>
                      

{%- for option in product.options_with_values -%}
                      
                            <div class="itex select" style="{% if product.has_only_default_variant %}display: none;{% endif %}">

                                <select class="select__select sticky-selector" name="{{ option.name }}" aria-label="{{ option.name }}">
                                <option value="" disabled>{{ option.name }}</option>

                                {%- for opt in option.values -%}
                                    <option value="{{ opt }}">
                                        {{ opt }}     
                                    </option>
                                {%- endfor -%}
                      
                                </select>

                                <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-caret" viewBox="0 0 10 6">

                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M9.354.646a.5.5 0 00-.708 0L5 4.293 1.354.646a.5.5 0 00-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 000-.708z" fill="currentColor"></path>

                                </svg>

                            </div>
{% endfor %}

                      
{% assign current_variant_sticky = product.selected_or_first_available_variant.id %}
<select id="select_precise" class="select__select" name="id" aria-label="Variant" style="display:none;">
    <option value="{{ current_variant_sticky }}">{{ current_variant_sticky }}</option>
</select>



                      

                            {% if section.settings.show_quantity_input %}

                                <quantity-input class="quantity">

                                    <button class="quantity__button no-js-hidden" name="minus" type="button">

                                        <span class="visually-hidden">{{ 'products.product.quantity.decrease' | t: product: product.title | escape }}</span>

                                        {% render 'icon-minus' %}

                                    </button>

                                    <input class="quantity__input" type="number" name="quantity" id="Quantity-{{ section.id }}" min="1" value="1" form="{{ product_form_id }}">

                                    <button class="quantity__button no-js-hidden" name="plus" type="button">

                                        <span class="visually-hidden">{{ 'products.product.quantity.increase' | t: product: product.title | escape }}</span>

                                        {% render 'icon-plus' %}

                                    </button>

                                </quantity-input>

                            {% endif %}

                      <script>
                         document.addEventListener("DOMContentLoaded", function() {
                            const stickyAvailable = document.querySelector("#eg-sticky-atc .product-form__submit .submit-available");
                            const stickySoldOut = document.querySelector("#eg-sticky-atc .product-form__submit .submit-soldout");
                            
                            if({{current_variant.available}}){
                              stickyAvailable.style.display = "inline";
                            }else{
                              stickySoldOut.style.display = "inline";
                            }
                         });
                      </script>

                            <button type="submit" name="add" class="itex product-form__submit button button--{{ section.settings.btn_style }} 
                      {% if product.selected_or_first_available_variant.available == false %}
                          button--secondary
                        {% endif %}"
                            {% if product.selected_or_first_available_variant.available == false %}
                          disabled
                        {% endif %}
                              >

                                <span class="submit-available" style="display:none;">
                                      {{ 'products.product.add_to_cart' | t }}
                                </span>

                                <span class="submit-soldout" style="display:none;">
                                      {{ 'products.product.sold_out' | t }}
                                </span>

                      {% comment %}
                                    {%- if current_variant.available -%}
                                    {%- else -%}
                                    {%- endif -%}
                      {% endcomment %}

                                <div class="loading-overlay__spinner hidden">

                                    <svg aria-hidden="true" focusable="false" role="presentation" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">

                                        <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30" style="stroke: rgb(var(--color-background));"></circle>

                                    </svg>

                                </div>

                            </button>

                        </div>

                    {% endform %}

                </product-form>

            </div>

        </div>

    </div>

{% endif %}



{% schema %}

{

    "name": "Sticky ATC",

    "settings": [

        {

            "type": "header",

            "content": "General"

        },

        {

            "type": "checkbox",

            "id": "enable_section",

            "label": "Enable \"Sticky ATC\"",

            "info": "Quickly enable or disable this feature",

            "default": true

        },

        {

            "type": "select",

            "id": "color_scheme",

            "options": [

                { "value": "accent-1", "label": "Accent 1" },

                { "value": "accent-2", "label": "Accent 2" },

                { "value": "background-1", "label": "Background 1" },

                { "value": "background-2", "label": "Background 2" },

                { "value": "inverse",  "label": "Inverse" }

            ],

            "default": "background-1",

            "label": "Color scheme"

        },


        {

            "type": "checkbox",

            "id": "show_img",

            "default": true,

            "label": "Show image"

        },


        {

            "type": "checkbox",

            "id": "show_quantity_input",

            "default": true,

            "label": "Show quantity field"

        },

        {

            "type": "select",

            "id": "btn_style",

            "options": [

                { "value": "primary", "label": "Primary" },

                { "value": "secondary", "label": "Secondary" }

            ],

            "default": "primary",

            "label": "'Add to cart' button style"

        },

        {

            "type": "header",

            "content": "Advanced"

        },

        {

            "type": "range",

            "id": "offset",

            "label": "Offset",

            "min": 0,

            "max": 500,

            "step": 10,

            "default": 0,

            "info": "Adjust the offset value when showing the Sticky ATC section related to the main product form."

        },

        {

            "type": "header",

            "content": "Spacing",

            "info": "Based on 'rem' values [Learn more](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units)"

        },

        {

            "type": "range",

            "id": "pt",

            "label": "Padding top",

            "min": 0,

            "max": 5,

            "step": 0.5,

            "step": 0.5,

            "default": 0.5

        },

        {

            "type": "range",

            "id": "pb",

            "label": "Padding bottom",

            "min": 0,

            "max": 5,

            "step": 0.5,

            "default": 0.5

        }

    ]

}

{% endschema %}
